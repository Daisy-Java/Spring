源码解读：
org.springframework.context.support.AbstractApplicationContext#refresh
=> org.springframework.context.support.AbstractApplicationContext#finishBeanFactoryInitialization, 初始化所有剩余的单例bean
=> org.springframework.beans.factory.support.DefaultListableBeanFactory#preInstantiateSingletons
=> org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)
=> org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean, 真正执行获取bean
	=> org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String), 如果三级缓存中存在，则直接取bean
	=> org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[]), 如果不存在，则创建bean
		=> org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean, 真正执行创建bean
			=> org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance, 实例化bean: obtainFromSupplier、instantiateUsingFactoryMethod、autowireConstructor、instantiateBean
			=> org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#populateBean, 填充 bean 属性: autowireByName、autowireByType、postProcessPropertyValues
			=> org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#initializeBean(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition), 初始化bean: invokeAwareMethods、applyBeanPostProcessorsBeforeInitialization、invokeInitMethods、applyBeanPostProcessorsAfterInitialization



Bean生命周期
1.执行InstantiationAwareBeanPostprocessor的postProcessBeforeInstantiation() //Instantiation 实例化
2.执行bean构造器
3.执行InstantiationAwareBeanPostprocessor的postProcessPropertyValues()
4.对bean属性进行依赖注入
5.各种aware接口（源码在哪里？）
	如果bean实现了BeanNameAware接口，spring将bean的id传给setBeanName()方法；
	BeanClassLoaderAware ,setBeanClassLoader()；
	如果bean实现了BeanFactoryAware接口，spring将调用setBeanFactory方法，将BeanFactory实例传进来；
	EnvironmentAware ,setEnvironment()；
	EmbeddedValueResolverAware ,setEmbeddedValueResolver()；
	ResourceLoaderAware ,setResourceLoader()；
	ApplicationEventPublisherAware ,setApplicationEventPublisher();
	MessageSourceAware ,setMessageSource();
	如果bean实现了ApplicationContextAware接口，它的setApplicationContext()方法将被调用，将应用上下文的引用传入到bean中；
	如果是WebApplication，ServeltContextAware，setServeltContext();
6.如果bean实现了BeanPostProcessor接口，调用postProcessBeforeInitialization方法；
7.如果bean实现了InitializingBean接口，调用afterPropertiesSet方法，类似的如果bean使用了init-method属性声明了初始化方法，该方法也会被调用；
8.如果bean实现了BeanPostProcessor接口，调用postProcessAfterInitialization方法；
9.此时bean已经准备就绪，可以被应用程序使用了，他们将一直驻留在应用上下文中，直到该应用上下文被销毁；